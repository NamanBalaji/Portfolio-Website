<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design Pattern on Naman Balaji</title><link>https://namanbalaji.github.io/Portfolio-Website/tags/design-pattern/</link><description>Recent content in Design Pattern on Naman Balaji</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 20 Jul 2022 20:16:20 +0530</lastBuildDate><atom:link href="https://namanbalaji.github.io/Portfolio-Website/tags/design-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>SOLID Design Principles</title><link>https://namanbalaji.github.io/Portfolio-Website/blogs/solid_design/</link><pubDate>Wed, 20 Jul 2022 20:16:20 +0530</pubDate><guid>https://namanbalaji.github.io/Portfolio-Website/blogs/solid_design/</guid><description>We want to design and write software that is well engineered, decoupled, reusable, and responsive to changing requirements. Obviously, we want to avoide writing bad code. But what exactly is bad code ? Following are some of the properties of bad code :
Rigid: Is the code rigid? Does it have a straight jacket of overbearing types and parameters, that making modification difficult? Fragile: Is the code fragile? Does the slightest change ripple through the code base causing untold havoc?</description></item></channel></rss>